---
title: 'Project 2: Modeling, Testing, and Predicting'
author: "SDS348"
date: ''
output:
  pdf_document:
    toc: yes
  html_document:
    toc: yes
    toc_float:
      collapsed: no
      smooth_scroll: yes
---

```{r setup, include=FALSE}
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
  # this hook is used only when the linewidth option is not NULL
  if (!is.null(n <- options$linewidth)) {
    x = knitr:::split_lines(x)
    # any lines wider than n should be wrapped
    if (any(nchar(x) > n)) x = strwrap(x, width = n)
    x = paste(x, collapse = '\n')
  }
  hook_output(x, options)
})

knitr::opts_chunk$set(echo = TRUE, eval = TRUE,fig.align="center",warning=FALSE,message=FALSE,fig.width=8, fig.height=5, linewidth=60)
options(tibble.width = 100,width = 100)
library(tidyverse)

class_diag<-function(probs,truth){
  
  tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
  acc=sum(diag(tab))/sum(tab)
  sens=tab[2,2]/colSums(tab)[2]
  spec=tab[1,1]/colSums(tab)[1]
  ppv=tab[2,2]/rowSums(tab)[2]

  if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
  
  #CALCULATE EXACT AUC
  ord<-order(probs, decreasing=TRUE)
  probs <- probs[ord]; truth <- truth[ord]
  
  TPR=cumsum(truth)/max(1,sum(truth)) 
  FPR=cumsum(!truth)/max(1,sum(!truth))
  
  dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
  TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
  
  n <- length(TPR)
  auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )

  data.frame(acc,sens,spec,ppv,auc)
}
```

Heather Seiders hms2364

# Modeling

## Instructions

A knitted R Markdown document (as a PDF) and the raw R Markdown file (as .Rmd) should both be submitted to Canvas by 11:59pm on 5/1/2020. These two documents will be graded jointly, so they must be consistent (i.e., donâ€™t change the R Markdown file without also updating the knitted document). Knit an html copy too, for later! In the .Rmd file for Project 2, you can copy the first code-chunk into your project .Rmd file to get better formatting. Notice that you can adjust the opts_chunk$set(...) above to set certain parameters if necessary to make the knitting cleaner (you can globally set the size of all plots, etc). You can copy the set-up chunk in Project2.Rmd: I have gone ahead and set a few for you (such as disabling warnings and package-loading messges when knitting)! 

Like before, I envision your written text forming something of a narrative structure around your code/output. All results presented must have corresponding code. Any answers/results/plots etc. given without the corresponding R code that generated the result will not be graded. Furthermore, all code contained in your final project document should work properly. Please do not include any extraneous code or code which produces error messages. (Code which produces warnings is acceptable, as long as you understand what the warnings mean).

## Find data:

Find one dataset with at least 5 variables that wish to use to build models. At least one should be categorical (with 2-5 groups) and at least two should be numeric. Ideally, one of your variables will be binary (if not, you will need to create one by discretizing a numeric, which is workable but less than ideal). You will need a minimum of 40 observations (*at least* 10 observations for every explanatory variable you have, ideally 20+ observations/variable).

It is perfectly fine to use either dataset (or the merged dataset, or a subset of your variables) from Project 1. However, you could also diversify your portfolio a bit by choosing a different dataset to work with (particularly if the variables did not reveal interesting associations in Project 1). The only requirement/restriction is that you may not use data from any examples we have done in class or lab. It would be a good idea to pick more cohesive data this time around (i.e., variables that you actually thing might have a relationship you would want to test). Think more along the lines of your Biostats project.

Again, you can use data from anywhere you want (see bottom for resources)! If you want a quick way to see whether a built-in (R) dataset has binary and/or character (i.e., categorical) variables, check out this list: https://vincentarelbundock.github.io/Rdatasets/datasets.html.


## Guidelines and Rubric

##### 0.) (5 pts)** Introduce your dataset and each of your variables (or just your main variables if you have lots) in a paragraph. What are they measuring? How many observations?

The regseasonstats dataset is the National Basketball Association player game statistics during the 2018-2019 basketball season. Players included in the dataset played 70% or more of their teams games. The regseasonstats data observes a variety of some of ranked by ESPN from the regular season. There are 24 variables in the dataset - all statistics from during game play, ie: position, games played, minutes per game, average points per game, assists, etc. These assumptions are made based on player conistency through the regular season being reflected during the post season. Even though the season has been indefinitely suspended, my boyfriend has gotten me more into sports, and we both like to follow players and teams each season.

##### 1.) (15 pts)** Perform a MANOVA testing whether any of your numeric variables (or a subset of them, if including them all doesn't make sense) show a mean difference across levels of one of your categorical variables (3). If they do, perform univariate ANOVAs to find response(s) showing a mean difference across groups (3), and perform post-hoc t tests to find which groups differ (3). Discuss the number of tests you have performed, calculate the probability of at least one type I error (if unadjusted), and adjust the significance level accordingly (bonferroni correction) before discussing significant differences (3). Briefly discuss assumptions and whether or not they are likely to have been met (2).

```{R}
library(readxl)
regseasonstats <- read_excel("regseasonstats.xlsx")

manova(cbind(GP,MIN,PTS,FGM,FGA,FTM,FTA,REB,AST,STL,BLK,TO,DD2,TD3,PER)~POS, data=regseasonstats)
manova1 <- manova(cbind(GP,MIN,PTS,FGM,FGA,FTM,FTA,REB,AST,STL,BLK,TO,DD2,TD3,PER)~POS, data=regseasonstats)
summary(manova1)
    
summary.aov(manova1)
    
regseasonstats1 <- regseasonstats %>%filter(POS %in% c("C","PF","SF","SG","PG"))
pairwise.t.test(regseasonstats1$REB, regseasonstats1$POS, p.adj="none")
pairwise.t.test(regseasonstats1$AST, regseasonstats1$POS, p.adj="none")
pairwise.t.test(regseasonstats1$BLK, regseasonstats1$POS, p.adj="none")
pairwise.t.test(regseasonstats1$DD2, regseasonstats1$POS, p.adj="none")
    
#new alpha
.05/4
0.0125
    
#type1error
1-(0.95)^4
0.1854938
```

1 manova test, 15 univariate ANOVA tests, and 4 post-hoc tests were performed because 4 variables still showed to be significant even after the manova.With the 4 post-hoc tests, the new significance level is 0.0125, and the type I error is 0.1854938. Manova assumptions of random sampling and independent observations are expected/assumed to be met because each player listed has their own stat line and is not dependent on another player. However, because many variables are point related, ie. free throws made, points per game, three pointers made, etc., multicollinearity may not be met due to the dependent variables being more closely related to each other.

##### 2.) (10 pts)** Perform some kind of randomization test on your data (that makes sense). This can be anything you want! State null and alternative hypotheses, perform the test, and interpret the results (7). Create a plot visualizing the null distribution and the test statistic (3).

```{R}
summary(aov(PTS~POS,data=regseasonstats))
fstat <- 0.919
    
random <-replicate(5000,{ 
    new_PTS<-regseasonstats1%>%mutate(PTS=sample(PTS)) 
    SSW<- new_PTS%>%group_by(POS)%>%summarize(SSW=sum((PTS-mean(PTS))^2))%>%
    summarize(sum(SSW))%>%pull
    SSB<- new_PTS%>%mutate(mean=mean(PTS))%>%group_by(POS)%>%mutate(groupmean=mean(PTS))%>%
    summarize(SSB=sum((mean-groupmean)^2))%>%summarize(sum(SSB))%>%pull
    (SSB/4)/(SSW/1054) 
    })

    mean(random>fstat)
    
ggplot(regseasonstats1,aes(PTS,fill=POS))+geom_histogram(bins=10)+facet_wrap(~POS, ncol=2)+theme(legend.position="none")
    
#H0: The mean average points per game scored is the same for all positions
#HA: The mean average points per game scored is different for all positions
```

Because the f-statistic is greater than 0.05, we fail to reject the null hypothesis and conclude that each position scores a different amount of points per game on average. The graphs shown also help visualize the difference in the average amount of points scored per game. 


##### 3.) (35 pts)** Build a linear regression model predicting one of your response variables from at least 2 other variables, including their interaction. Mean-center any numeric variables involved in the interaction.

    - Interpret the coefficient estimates (do not discuss significance) (10)
    - Plot the regression using `ggplot()`. If your interaction is numeric by numeric, refer to code near the end of WS15 to make the plot. If you have 3 or more predictors, just chose two to plot for convenience. (8)
    - Check assumptions of linearity, normality, and homoskedasticity either graphically or using a hypothesis test (4)
    - Regardless, recompute regression results with robust standard errors via `coeftest(..., vcov=vcovHC(...))`. Discuss significance of results, including any changes from before/after robust SEs if applicable. (8)
    - What proportion of the variation in the outcome does your model explain? (4)

```{R}
library(lmtest)
library(sandwich)
ggplot(regseasonstats1, aes(x=PTS, y=MIN,group=POS))+geom_point(aes(color=POS))+
geom_smooth(method="lm",formula=y~1,se=F,fullrange=T,aes(color=POS))
fit<-lm(MIN ~ PTS + POS, data=regseasonstats1)
summary(fit)
coeftest(fit)
    
#assumptions
resids<-fit$residuals
fitvals<-fit$fitted.values
ggplot()+geom_point(aes(fitvals,resids))+geom_hline(yintercept=0, color='red')
ggplot()+geom_histogram(aes(resids), bins = 25)
    
coeftest(fit, vcov = vcovHC(fit))
```

All assumptions check out. Normality is confirmed with the histogram and linearity and homoskedacity are both confirmed using a scatterplot with regression. Because the coefficient estimates all show an absolute value of 0.45-1.3, the difference between average minutes played and average points scored per game is significant when comparing each position. The original coeftest and robust coeftest are fairly similar to each other with most values differing only about 0.1. Each position has a standard error coefficiant ranging between ~1.3 - 1.6, meaning that each position is very different from the actual average amount of points scored and minutes played  per player. The t-value estimate for each position for both average minutes played and average points scored are all fairly high, ranging from ~ -0.5 - 0.95, showing that the averages for each position are all different from each other. Each p-value per each position is significantly greater than 0.05, further confirming the significant difference amongst variables when controlling for position. My model explains 53.89% of the variation amongst the variables. 

##### 4.) (5 pts)** Rerun same regression model (with interaction), but this time compute bootstrapped standard errors. Discuss any changes you observe in SEs and p-values using these SEs compared to the original SEs and the robust SEs)

```{R}
fit<-lm(MIN~PTS*POS,data=regseasonstats1)
resids<-fit$residuals
fitted<-fit$fitted.values
resid_resamp<-replicate(5000,{
    new_resids<-sample(resids,replace=TRUE)
    regseasonstats1$MIN<-fitted+new_resids 
    fit<-lm(MIN~PTS*POS,data=regseasonstats1)
    coef(fit) 
    })
resid_resamp%>%t%>%as.data.frame%>%summarize_all(sd)
```

After bootstrapping for standard errors, the standard error has further increased from the original and robust standard errors for all positions - increases ranging from ~0.5-1.0. 

##### 5.) (40 pts)** Perform a logistic regression predicting a binary categorical variable (if you don't have one, make/get one) from at least two explanatory variables (interaction not necessary). 

    - Interpret coefficient estimates in context (10)
    - Report a confusion matrix for your logistic regression (2)
    - Compute and discuss the Accuracy, Sensitivity (TPR), Specificity (TNR), and Recall (PPV) of your model (5)
    - Using ggplot, plot density of log-odds (logit) by your binary outcome variable (3)
    - Generate an ROC curve (plot) and calculate AUC (either manually or with a package); interpret (10)
    - Perform 10-fold (or repeated random sub-sampling) CV and report average out-of-sample Accuracy, Sensitivity, and Recall (10)

```{R}
library(pROC)
library(plotROC)
library(tidyverse)  
library(lmtest)
binaryvar<-regseasonstats%>%mutate(y=ifelse(POS=="PG",1,0))
reg5 <- glm(y~GP+PTS, data= binaryvar, family =binomial(link="logit"))
summary(reg5)
coeftest(reg5)
exp(coef(reg5))
probability <- predict(reg5, type = "response")
table(predict = as.numeric(probability >0.3), truth=binaryvar$y)%>%addmargins
#accuracy
(35+4)/51
#sensitivity
35/42
#specificity
4/11
#recall
35/40
reg_plot<-ggplot(reg5)+geom_roc(aes(d=y,m=reg5$linear.predictors), n.cuts=0)
reg_plot
#AUC
calc_auc(reg_plot)
set.seed(1234)
k=10
data <- binaryvar %>% sample_frac 
folds <- ntile(1:nrow(data),n=10) 
diags<-NULL
for(i in 1:k){
train <- data[folds!=i,] #create training set (all but fold i)
test <- data[folds==i,] #create test set (just fold i)
truth <- test$POS #save truth labels from fold i
fit <- glm(y~GP+PTS,
data=binaryvar, family="binomial")
probs <- predict(fit, newdata=test, type="response")
diags<-rbind(diags,class_diag(probs,truth))
}
summarize_all(diags,mean)

#out of sample
#accuracy
0.3366667	
#sensitivity
0	
#recall
NaN
```

Each position has a estimate coefficiant for games played and average points scored of 0.9247 and 1.0349 respectively. Because the values are both close to 1, the variables can be assumed to be closely directly proportional. Accuracy - (0.76471): The model generated is 75.47% accurate with predicting the relation between position with games played and average points scored per game. Making the model fairly reliable, but not completely. Sensitivity - (0.83333): The model generated a sensitivity of 83.33%, giving a more accurate percentage/proportion of correctly identified predictions. Specificity - (0.3636364): The model generated a specificity of 36.36%, giving an accurate percentage of those predictions that are likely to be incorrect. Recall - (0.875): Because this calculation is near 1, is it safe to say that the information and predictions given are very related due to the slope of the recall graph being 0.875. Average out-of-sample accuracy- (0.3366667). Average out-of-sample sensitivity- (0). Average out-of-sample recall- (NaN).

##### 6.) (10 pts)** Choose one variable you want to predict (can be one you used from before; either binary or continuous) and run a LASSO regression inputting all the rest of your variables as predictors. Choose lambda to give the simplest model whose accuracy is near that of the best (i.e., `lambda.1se`). Discuss which variables are retained. Perform 10-fold CV using this model: if response in binary, compare model's out-of-sample accuracy to that of your logistic regression in part 5; if response is numeric, compare the residual standard error (at the bottom of the summary output, aka RMSE): lower is better fit!

```{R}
library(glmnet)
number6 <- binaryvar %>% select(-2, -8, -9)
set.seed(1234)
x <- model.matrix(Name~., data = number6)[,-1]
y <- as.matrix(number6$FTM)
head(x)
cv <- cv.glmnet(x,y)
lasso <- glmnet(x,y, lambda = cv$lambda.1se)
coef(lasso)

#10 fold cv
set.seed(1234)
k=10
data <- binaryvar %>% sample_frac 
folds <- ntile(1:nrow(data),n=10) 
diags<-NULL
for(i in 1:k){
train <- data[folds!=i,] #create training set (all but fold i)
test <- data[folds==i,] #create test set (just fold i)
truth <- test$POS #save truth labels from fold i
fit <- glm(y~PTS+REB+AST+BLK,
data=binaryvar, family="binomial")
probs <- predict(fit, newdata=test, type="response")
diags<-rbind(diags,class_diag(probs,truth))
}
summarize_all(diags,mean)
#accuracy
0.3366667	
```

The calculated AUC for the 10-fold cv resulted in "NA". I believe this is because of the subcategories within my POS categorical variable; ie. the five different positions, not only and 'yes' or 'no' variable. The accuracy calculated to this 10-fold cv is 0.3366667, which is the same as the accuracy calculated in number 5. Because these accuracies are fairly low, position is not very reliable when predicting any game statistics and splitting the data into smaller/more specific groups.
